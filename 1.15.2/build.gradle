plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id 'com.modrinth.minotaur' version '[2,)' apply false
}

ext.config = parseConfig(file('../build.properties'))
ext.customConfig = parseConfig(file('build.properties'))
ext.config.MIN_SUPPORTED_VERSION = customConfig.MIN_SUPPORTED_VERSION
ext.config.MINECRAFT_VERSION = customConfig.MINECRAFT_VERSION
ext.config.FORGE_VERSION = customConfig.FORGE_VERSION
ext.config.MAPPINGS_CHANNEL = customConfig.MAPPINGS_CHANNEL
ext.config.MAPPINGS_VERSION = customConfig.MAPPINGS_VERSION
ext.config.JAVA_LANG_VERSION = customConfig.JAVA_LANG_VERSION
ext.config.MIXIN_VERSION = customConfig.MIXIN_VERSION

project.version = config.VERSION
project.group = "${config.GROUP}.${config.ARTIFACT}"
base.archivesName = "${config.ARCHIVES_BASE_NAME}-${config.MIN_SUPPORTED_VERSION}"

java.toolchain.languageVersion = JavaLanguageVersion.of(config.JAVA_LANG_VERSION)

java.withSourcesJar()

minecraft {
    mappings channel: config.MAPPINGS_CHANNEL, version: config.MAPPINGS_VERSION

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            // property 'forge.logging.markers', 'SCAN,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                nebs {
                    source sourceSets.main
                }
            }
        }

        client { }

        server {
            args '--nogui'
        }

        data {
            args '--mod', 'nebs', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('../common/src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir '../common/src/main/resources'
}

mixin {
    add sourceSets.main, "META-INF/mixin/nebs.refmap.json"
    config 'META-INF/mixin/nebs.mixins.json'

    debug.export = true
    dumpTargetOnFailure = true
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.MINECRAFT_VERSION}-${config.FORGE_VERSION}"

    annotationProcessor "org.spongepowered:mixin:${config.MIXIN_VERSION}:processor"
}

jar {
    manifest {
        attributes([
                'Specification-Title'   : config.TITLE,
                'Specification-Vendor'  : config.AUTHOR,
                'Specification-Version' : '1',
                'Implementation-Title'  : config.TITLE,
                'Implementation-Version': config.VERSION,
                'Implementation-Vendor' : config.AUTHOR
        ])
    }

    finalizedBy 'reobfJar'
}

sourcesJar {
    archiveClassifier = 'deobf-sources'
}

afterEvaluate {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test).configureEach {
        defaultCharacterEncoding = 'UTF-8'
    }

    tasks.withType(Javadoc).configureEach {
        options.encoding = 'UTF-8'
    }
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: ['**/*.json', '**/*.mcmeta']).each {
            try {
                it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
            } catch (Exception e) {
                project.logger.error("Failed to minify file '${it.path}'.")
                throw e
            }
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

idea.module { downloadJavadoc = downloadSources = true }
eclipse.synchronizationTasks 'genEclipseRuns'
